Topic: Java interfaces
Context: an interface in the java programming language is an abstract type that is used to declare a behavior that classes must implement. they are similar to protocols. interfaces are declared using the interface keyword, and may only contain method signature and constant declarations ( variable declarations that are declared to be both static and final ). all methods of an interface do not contain implementation ( method bodies ) as of all versions below java 8. starting with java 8, default : 99 and static : 7 methods may have implementation in the interface definition. then, in java 9, private and private static methods were added. at present, a java interface can have up to six different types. interfaces cannot be instantiated, but rather are implemented. a class that implements an interface must implement all of the non - default methods described in the interface, or be an abstract class. object references in java may be specified to be of an interface type ; in each case, they must either be null, or be bound to an object that implements the interface. one benefit of using interfaces is that they simulate multiple inheritance. all classes in java must have exactly one base class, the only exception being java. lang. object ( the root class of the java type system ) ; multiple inheritance of classes is not allowed. however, an interface may inherit multiple interfaces and a class may implement multiple interfaces. = = overview = = interfaces are used to encode similarities which the classes of various types share, but do not necessarily constitute a class relationship. for instance, a human and a parrot can both whistle ; however, it would not make sense to represent humans and parrots as subclasses of a whistler class. rather they most likely be subclasses of an animal class ( likely with intermediate classes ), but both would implement the whistler interface. another use of interfaces is being able to use an object without knowing its type of class, but rather only that it implements a certain interface. for instance, if one were annoyed by a whistling noise, one may not know whether it is a human or a parrot, because all that could be determined is that a whistler is whistling. the call whistler. whistle ( ) will call the implemented method whistle of object whistler no matter what class it has, provided it implements whistler. in a more practical example, a sorting algorithm may expect an object of type comparable. thus, without knowing the specific type, it knows that objects of that type can somehow be sorted.

Generate  10 multiple-choice questions based on this context. Format each question as:
Q: [Question Text]
a) [Option A]
b) [Option B]
c) [Option C]
d) [Option D]
Correct Answer: [a/b/c/d]


